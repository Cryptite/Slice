From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Cryptite <cryptite@gmail.com>
Date: Fri, 29 Oct 2021 10:22:23 -0500
Subject: [PATCH] Block Mob Spawns globally by EntityType


diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index 0277627e97b51e20470ccf578cee48470e06a34b..c73bbfdd44f674b221574782cb8d6c3c02283f91 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -662,4 +662,16 @@ public class PaperConfig {
     private static void sendFullPosForHardCollidingEntities() {
         sendFullPosForHardCollidingEntities = getBoolean("settings.send-full-pos-for-hard-colliding-entities", true);
     }
+
+    // Slice start
+    public static java.util.Set<net.minecraft.world.entity.EntityType<?>> globalBlockedMobSpawnTypes = new java.util.HashSet<>();
+
+    private static void globalBlockedMobSpawnTypes() {
+        java.util.List<String> list = getList("settings.global-blocked-mobspawn-types", java.util.Collections.emptyList());
+        for (String type : list) {
+            java.util.Optional<net.minecraft.world.entity.EntityType<?>> entityType = net.minecraft.world.entity.EntityType.byString(type.toLowerCase());
+            entityType.ifPresent(eType -> globalBlockedMobSpawnTypes.add(eType));
+        }
+    }
+    // Slice end
 }
diff --git a/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java b/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
index 86528ff031014e788d72a8bf7c1c9443512096bb..ff5c6d262b0e5d4fad85edd060460f087bd6e5e8 100644
--- a/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
+++ b/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
@@ -41,9 +41,10 @@ public class MobSpawnSettings {
         }), Codec.BOOL.fieldOf("player_spawn_friendly").orElse(false).forGetter(MobSpawnSettings::playerSpawnFriendly)).apply(instance, MobSpawnSettings::new);
     });
     private final float creatureGenerationProbability;
-    private final Map<MobCategory, WeightedRandomList<MobSpawnSettings.SpawnerData>> spawners;
-    private final Map<EntityType<?>, MobSpawnSettings.MobSpawnCost> mobSpawnCosts;
+    private Map<MobCategory, WeightedRandomList<MobSpawnSettings.SpawnerData>> spawners; // Slice
+    private Map<EntityType<?>, MobSpawnSettings.MobSpawnCost> mobSpawnCosts; // Slice
     private final boolean playerSpawnFriendly;
+    private boolean stripped; // Slice
 
     MobSpawnSettings(float creatureSpawnProbability, Map<MobCategory, WeightedRandomList<MobSpawnSettings.SpawnerData>> spawners, Map<EntityType<?>, MobSpawnSettings.MobSpawnCost> spawnCosts, boolean playerSpawnFriendly) {
         this.creatureGenerationProbability = creatureSpawnProbability;
@@ -52,7 +53,43 @@ public class MobSpawnSettings {
         this.playerSpawnFriendly = playerSpawnFriendly;
     }
 
+    // Slice start
+    // This very stupid thing is because Mob Spawning Biome data is statically registered before CraftServer
+    // is even created. As a result, we need to lazily rebuild our spawning data here which is very cool and very
+    // stupid. But it should only really happen once up front, so isn't the end of the world
+    private void stripSpawnData() {
+        if (com.destroystokyo.paper.PaperConfig.globalBlockedMobSpawnTypes.isEmpty()) {
+            stripped = true;
+            return;
+        }
+
+        Map<EntityType<?>, MobSpawnSettings.MobSpawnCost> finalMobSpawnCosts = new java.util.HashMap<>();
+        for (Entry<EntityType<?>, MobSpawnSettings.MobSpawnCost> entry : mobSpawnCosts.entrySet()) {
+            if (!com.destroystokyo.paper.PaperConfig.globalBlockedMobSpawnTypes.contains(entry.getKey())) {
+                finalMobSpawnCosts.put(entry.getKey(), entry.getValue());
+            }
+        }
+        this.mobSpawnCosts = ImmutableMap.copyOf(finalMobSpawnCosts);
+
+        Map<MobCategory, WeightedRandomList<MobSpawnSettings.SpawnerData>> finalSpawners = new java.util.HashMap<>();
+        for (Entry<MobCategory, WeightedRandomList<SpawnerData>> entry : spawners.entrySet()) {
+            List<SpawnerData> finalSpawnerData = new java.util.ArrayList<>();
+            for (SpawnerData spawnerData : entry.getValue().unwrap()) {
+                if (!com.destroystokyo.paper.PaperConfig.globalBlockedMobSpawnTypes.contains(spawnerData.type)) {
+                    finalSpawnerData.add(spawnerData);
+                }
+            }
+
+            finalSpawners.put(entry.getKey(), finalSpawnerData.isEmpty() ? EMPTY_MOB_LIST : WeightedRandomList.create(finalSpawnerData));
+        }
+
+        this.spawners = ImmutableMap.copyOf(finalSpawners);
+        stripped = true;
+    }
+    // Slice end
+
     public WeightedRandomList<MobSpawnSettings.SpawnerData> getMobs(MobCategory spawnGroup) {
+        if (!stripped) stripSpawnData(); // Slice
         return this.spawners.getOrDefault(spawnGroup, EMPTY_MOB_LIST);
     }
 
