From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Cryptite <cryptite@gmail.com>
Date: Wed, 3 Jan 2024 11:03:33 -0600
Subject: [PATCH] Shared Data Storage


diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index a6f58b3457b7477015c5c6d969e7d83017dd3fa1..7f2070bd2d7eb7f0256a96df00103d20c45e65a0 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -331,6 +331,7 @@ public class GlobalConfiguration extends ConfigurationPart {
         public boolean useDimensionTypeForCustomSpawners = false;
         public boolean strictAdvancementDimensionCheck = false;
         public IntOr.Default compressionLevel = IntOr.Default.USE_DEFAULT;
+        public String sharedDataFolder = ""; // Slice
     }
 
     public BlockUpdates blockUpdates;
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 04c6357d24a095bcff40e267cd40920e3b3c3c5d..1c0b55cb77616811270c9b3ee1223184fe189832 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import com.google.common.base.Preconditions;
 import com.google.common.base.Splitter;
+import com.google.common.base.Strings;
 import com.google.common.collect.ImmutableList;
 import co.aikar.timings.Timings;
 import com.destroystokyo.paper.event.server.PaperServerListPingEvent;
@@ -315,6 +316,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public static final long SERVER_INIT = System.nanoTime();
     // Paper end - lag compensation
 
+    @Nullable DimensionDataStorage sharedDataStorage; // Slice
+
     public static <S extends MinecraftServer> S spin(Function<Thread, S> serverFactory) {
         AtomicReference<S> atomicreference = new AtomicReference();
         Thread thread = new io.papermc.paper.util.TickThread(() -> { // Paper - rewrite chunk system
@@ -416,6 +419,12 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         this.paperConfigurations = services.paperConfigurations(); // Paper
     }
 
+    // Slice start
+    public DimensionDataStorage getMapDataStorage() {
+        return sharedDataStorage != null ? sharedDataStorage : overworld().getDataStorage();
+    }
+    // Slice end
+
     private void readScoreboard(DimensionDataStorage persistentStateManager) {
         persistentStateManager.computeIfAbsent(this.getScoreboard().dataFactory(), "scoreboard");
     }
@@ -919,6 +928,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             this.isSaving = true;
             this.getPlayerList().saveAll(); // Diff on change
             flag3 = this.saveAllChunks(suppressLogs, flush, force);
+            if (sharedDataStorage != null) sharedDataStorage.save(); // Slice
         } finally {
             this.isSaving = false;
         }
@@ -1133,6 +1143,15 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 throw new IllegalStateException("Failed to initialize server");
             }
 
+            // Slice start
+            String sharedDataFolder = io.papermc.paper.configuration.GlobalConfiguration.get().misc.sharedDataFolder;
+            if (!Strings.isNullOrEmpty(sharedDataFolder)) {
+                File sharedDir = new File(sharedDataFolder);
+                sharedDir.mkdirs();
+                this.sharedDataStorage = new DimensionDataStorage(sharedDir, fixerUpper);
+            }
+            // Slice end
+
             this.nextTickTimeNanos = Util.getNanos();
             this.statusIcon = (ServerStatus.Favicon) this.loadStatusIcon().orElse(null); // CraftBukkit - decompile error
             this.status = this.buildServerStatus();
@@ -1539,6 +1558,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                     level.saveIncrementally(fullSave);
                 }
             }
+            if (sharedDataStorage != null) sharedDataStorage.save(); // Slice
         } finally {
             this.isSaving = false;
         }
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 2f7190b0f8957d5da2ed122a91e7047e80f2ab6f..be9f021333add074a5e2f0dca1e559c3735d436a 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -2137,7 +2137,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     @Override
     public MapItemSavedData getMapData(String id) {
         // Paper start - Call missing map initialize event & set id
-        final DimensionDataStorage storage = this.getServer().overworld().getDataStorage();
+        final DimensionDataStorage storage = this.getServer().getMapDataStorage(); // Slice
 
         final net.minecraft.world.level.saveddata.SavedData existing = storage.cache.get(id);
         if (existing == null && !storage.cache.containsKey(id)) {
@@ -2164,12 +2164,22 @@ public class ServerLevel extends Level implements WorldGenLevel {
         MapInitializeEvent event = new MapInitializeEvent(state.mapView);
         Bukkit.getServer().getPluginManager().callEvent(event);
         // CraftBukkit end
-        this.getServer().overworld().getDataStorage().set(id, state);
+        this.getServer().getMapDataStorage().set(id, state); // Slice
     }
 
     @Override
     public int getFreeMapId() {
-        return ((MapIndex) this.getServer().overworld().getDataStorage().computeIfAbsent(MapIndex.factory(), "idcounts")).getFreeAuxValueForMap();
+        // Slice start
+        DimensionDataStorage storage = this.getServer().getMapDataStorage();
+        MapIndex mapIndex = storage.readSavedData(MapIndex::load, MapItemSavedData.factory().type(), "idcounts");
+        if (mapIndex == null) {
+            mapIndex = new MapIndex();
+        }
+        int newId = mapIndex.getFreeAuxValueForMap();
+        storage.set("idcounts", mapIndex);
+        storage.save();
+        return newId;
+        // Slice end
     }
 
     // Paper start - helper function for configurable spawn radius
